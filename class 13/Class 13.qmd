---
title: "class 13"
author: "Mudit"
format: pdf
---

```{r}
library(BiocManager)
library(DESeq2)
```

Today we are going to work with some bulk RNAseq data from Himes et al., where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects

## 3. Import countData and colData

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

Now, take a look at the head of each.
```{r}
head(counts)
```

```{r}
head(metadata)
```

> Q1. How many genes are in this dataset?

38694 genes
there are `n row(counts)` genes in this  dataset
```{r}
nrow(counts)
```
 
> Q2. How many ‘control’ cell lines do we have? 

4 controls
```{r}
sum(metadata$dex == "control")
a <- metadata[metadata[,"dex"]=="control",]
nrow(a)
```

I want to compare "control" vs "treated"

1. Lets split the "counts" into `control.counts` and `treated.counts`

```{r}
head(counts)
```

```{r}
treat_ind <- metadata$"dex" == "treated"
contr_ind <- metadata$"dex" == "control"

metadata[treat_ind,]
```
```{r}
metadata[contr_ind,]
```

```{r}
control.counts <- counts[,contr_ind]
```
```{r}
treat.counts <- counts[,treat_ind]
```
## Let's calculate the mean counts per gene for "control" and "treated" - then we can compare.

Let's call it `control.mean` and `treat.mean`

I can use the `apply` function to apply `mean` over the rows or columns of any data.frame

```{r}
control.mean <- apply(control.counts, 1, mean)
treated.mean <- apply(treat.counts, 1, mean)
#control.mean
#mean(counts[,treat_ind])
```

Put these together for ease of book-keeping

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

```{r}
plot(meancounts, log = "xy")
```

we most often use log2 transforms here because it makes math easier

Let's calculate the log2 fold change and add it to our wee table `meancounts`
```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)

head(meancounts)
```
filter out all genes with zero counts in either control or treated:

```{r}
to.rm <- rowSums(meancounts[, 1:2] == 0) > 0
mycounts <- meancounts[!to.rm, ]
```

```{r}
nrow(mycounts)
```

> How many "down" regulated genes do we have at the common log2 fold change value of -2

```{r}
to.rm_1 <- mycounts$log2fc < -2
mycounts[to.rm_1, ]
#mycounts <- meancounts[to.rm_1, ]
```



> Q. How many "up" at log2fc > +2

```{r}
to.rm_2 <- mycounts$log2fc > 2
mycounts[to.rm_2, ]
```

> Q. Do we trust these results? Is there anything missing?

We are missing the stats!!!

## DESeq analysis

```{r}
#/ message: false
library(DESeq2)
```

DESeq, lie many BioConductor packages, wants our input data in a very specific format.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                       colData = metadata, 
                       design = ~dex)
```

The main function in DESeq2 is called `DESeq()`.

```{r}
dds <- DESeq(dds)
res <- results(dds)
```

```{r}
head(res)
```
A common overview figure plots the logFC vs P-value

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=c(-2, 2), col="gray")
abline(h = -log(0.005), col="gray")
```
```{r}
mycols <- rep("gray", nrow(res))

mycols[res$log2FoldChange > 2] <- "red"
mycols[res$log2FoldChange < -2] <- "red"
mycols[res$padj > 0.005] <- "gray" 
#mycols[res$log2FoldChange > -2 & res$log2FoldChange < 2] <- "green"

plot(res$log2FoldChange, -log(res$padj), col = mycols)
abline(v=c(-2, 2), col="gray")
abline(h = -log(0.005), col="gray")
```

```{r}
write.csv(res, file = "myresults.csv")
```

## Gene annotation

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")

```

```{r}
head(res)
```

## Pathway analysis

A quick KEGG pathway analysis with the **gage** function.

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```
I need to speak ENTREZID so I can check KEGG pathway overlap as KEGG uses ENTREZ format IDs
```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="ENTREZID",          # The new format we want to add
                     multiVals="first")
```

I can now use the **gage** function to check for overlap with known KEGG pathways

```{r}
foldchanges <- res$log2FoldChange

names(foldchanges) <- res$entrez

head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
head(keggres$less, 3)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![A pathway figure](hsa05310.pathview.png)



## 4. Toy differential gene expression

Note that the control samples are SRR1039508, SRR1039512, SRR1039516, and SRR1039520. This bit of code will first find the sample id for those labeled control. Then calculate the mean counts per gene across these samples:

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```
An alternative way to do this same thing using the dplyr package from the tidyverse is shown below. Which do you prefer and why?

```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

```{r}

```

