---
title: "Class_10"
author: "Mudit"
format: pdf
---



What is in the PDB database anyway?
I grabbed summary data from:
https://www.rcsb.org/stats/summary



```{r}
options(r3dmol.chrome.port.timeout = 120)  # Increase timeout
options(r3dmol.chrome.path = "C:/Path/To/Chrome/chrome.exe")  # Adjust path if necessary
library(r3dmol)

```

```{r}
pdbstats <- read.csv("Data Export Summary.csv", row.names = 1)
pdbstats
```

```{r}
convert_comma_numbers <- function(x){
  x <- as.numeric(gsub(",", "", x))
  
  return(x)
}
```




> Q1: What percentage of structures in the PDB are solved by X-Ray and Electron Microscopy.



```{r}
(195866/248838887) * 100
```

```{r}
n.tot <- sum(convert_comma_numbers(pdbstats$Total))
n.tot

```



248838887

The `apply` function is very useful as it can take any function and "apply" it over either the ROWS or COLs of a data.frame.



```{r}
library(readr)
Data_Export_Summary <- read_csv("Data Export Summary.csv")
#View(Data_Export_Summary)
```

```{r}
n.xray <- sum(convert_comma_numbers(pdbstats$X.ray))
n.em <- sum(convert_comma_numbers(pdbstats$EM))
```

```{r}
n.xray/n.tot *100
n.em/n.tot *100
```

```{r}

```



> Q2: What proportion of structures in the PDB are protein?

> Q3: Type HIV in the PDB website search box on the home page and determine how many HIV-1 protease structures are in the current PDB?

226707

> Q4: Water molecules normally have 3 atoms. Why do we see just one atom per water molecule in this structure?
## Uning Mol*

In PDB structures, water molecules are often represented by a single oxygen atom, as the hydrogen positions can be challenging to resolve in many structural determination methods.
![my first image from mol-star] 

> Q5: There is a critical “conserved” water molecule in the binding site. Can you identify this water molecule? What residue number does this water molecule have

Water Molecular 308

> Q6: Generate and save a figure clearly showing the two distinct chains of HIV-protease along with the ligand. You might also consider showing the catalytic residues ASP 25 in each chain and the critical water (we recommend “Ball & Stick” for these side-chains). Add this figure to your Quarto document.


![](1HSG.png)




```{r}
library(bio3d)
pdb <- read.pdb("1hsg")
pdb
```

```{r}
attributes(pdb)
```

```{r}
head(pdb$atom)
```



> Q7: How many amino acid residues are there in this pdb object? 

residues/Calpha atoms#: 198

> Q8: Name one of the two non-protein residues? 

HOH (which represents water molecules; there are 127 of them) and
MK1 (which is a non-protein ligand; there is 1 of them).

> Q9: How many protein chains are in this structure?

Chains#: 2 (values: A B).



```{r}
length(pdbseq(pdb))
```



## Functional dynamics prediction

Predicting functional motions of a single structure


```{r}
adk <- read.pdb("6s36")
adk
```

```{r}
# Perform flexiblity prediction
m <- nma(adk)
```

```{r}
plot(m)
```

```{r}
mktrj(m, file="adk_m7.pdb")
```



> Q10. Which of the packages above is found only on BioConductor and not CRAN? 

msa
The package that is found only on Bioconductor and not on CRAN is msa. It is specifically a Bioconductor package designed for multiple sequence alignment.

> Q11. Which of the above packages is not found on BioConductor or CRAN?: 

bio3d-view
The package that is not found on either Bioconductor or CRAN is bio3d-view. This package is installed from a Bitbucket repository using the devtools package, which allows installation from sources other than CRAN and Bioconductor.

> Q12. True or False? Functions from the devtools package can be used to install packages from GitHub and BitBucket? 

True. The devtools package provides functions that allow you to install packages from GitHub and Bitbucket, making it useful for accessing packages that are not available through the standard CRAN repository.




```{r}
library(bio3d)
aa <- get.seq("1ake_A")
aa
```



>Q13. How many amino acids are in this sequence, i.e. how long is this sequence? 

214



```{r}
hits <- NULL
hits$pdb.id <- c('1AKE_A','6S36_A','6RZE_A','3HPR_A','1E4V_A','5EJE_A','1E4Y_A','3X2S_A','6HAP_A','6HAM_A','4K46_A','3GMT_A','4PZL_A')
```

```{r}
# Download releated PDB files
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)
```

```{r}
# Align releated PDBs
pdbs <- pdbaln(files, fit = TRUE, exefile="msa")
```

```{r}
# Vector containing PDB codes for figure axis
ids <- basename.pdb(pdbs$id)

# Draw schematic alignment
#plot(pdbs, labels = ids)
#figure margins too large
```

```{r}
anno <- pdb.annotate(ids)
unique(anno$source)
```

```{r}
anno
```

```{r}
# Perform PCA
pc.xray <- pca(pdbs)
plot(pc.xray)
```


## PCA



```{r}
# Perform PCA
pc.xray <- pca(pdbs)
plot(pc.xray)
```

```{r}
# Calculate RMSD
rd <- rmsd(pdbs)

# Structure-based clustering
hc.rd <- hclust(dist(rd))
grps.rd <- cutree(hc.rd, k=3)

plot(pc.xray, 1:2, col="grey50", bg=grps.rd, pch=21, cex=1)
```



## Optional further visualization



```{r}
# Visualize first principal component
pc1 <- mktrj(pc.xray, pc=1, file="pc_1.pdb")
```

```{r}
#Plotting results with ggplot2
library(ggplot2)
library(ggrepel)

df <- data.frame(PC1=pc.xray$z[,1], 
                 PC2=pc.xray$z[,2], 
                 col=as.factor(grps.rd),
                 ids=ids)

p <- ggplot(df) + 
  aes(PC1, PC2, col=col, label=ids) +
  geom_point(size=2) +
  geom_text_repel(max.overlaps = 20) +
  theme(legend.position = "none")
p
```

```{r}
# NMA of all structures
modes <- nma(pdbs)
plot(modes, pdbs, col=grps.rd)
```


> Q14. What do you note about this plot? Are the black and colored lines similar or different? Where do you think they differ most and why?

They differ
The plot shows the fluctuations of different amino acid residues across multiple protein structures. 

The black line represents the average fluctuation for each residue. The colored lines depicts the fluctuations for individual structures.

Difference between coloured and black line is most prominent around residues 120 and 150




```{r, update.packages(ask = FALSE)}
#
#source("https://tinyurl.com/viewpdb")
#library(r3dmol)
#view.pdb(pdb)
```

```{r}
#view.pdb(adk)
```

```{r}
#modes <- nma(adk)
#plot(modes)
```

```{r}
#mktrj(modes, pdb = adk, file = "adk.pdb")
```

