---
title: "class 11: Structural Bioinformatics pt2"
author: "Mudit"
format: pdf
---

Today, before delving into structure prediction with alphafold we will finish off our previous lab10 "comparitive structure analysis" section

```{r}
library(bio3d)

id <- "1ake_A"

aa <- get.seq(id)

aa
```

```{r}
# PDB search the sequence
b <-  blast.pdb(aa)
```
```{r}
# check what is in b
attributes(b)
```

```{r}
head(b$hit.tbl)
```

```{r}
hist <- plot(b)
```

-log <- larger the better

```{r}
hits <- plot(b)
```

```{r}
attributes(hits)
```
Top hits that we like from our blast results:
```{r}
hits$pdb.id
```

```{r}
# Download releated PDB files
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)
```
I have now found and downloaded all ADK structures in the PDB database but viewing them is difficult as they need to be aligned and superpossed.

(Need MUSCLE but need package)
I am going to install BiocManager package from CRAN

THen I can use `BiocManager::install()` to install any bioconsuctor package.
```{r}
pdbs <- pdbaln(files, fit = TRUE, exefile="msa")
```

```{r}
pdbs
```

## Principle Component Analysis

```{r}
pc <- pca(pdbs)
plot(pc)
```

```{r}
plot(pc, pc.axes = c(1:2))
```

To examine in more detail what PC1 (or any PC2) is capturing here we can plot the loading or make a wee (small) movie (trajectory) of moving along PC1.

```{r}
#create a pdb file
mktrj(pc, pc = 1, file = "pc1.pdb")
```

## Custom analysis of resulting models

```{r}
results_dir <- "/Users/muditg19/Downloads/BGGN213/CLass 11/dimer_test_82aef"

# List PDB files
pdb_files <- list.files(path = results_dir, pattern = "*.pdb", full.names = TRUE)

# Check if PDB files were found
if (length(pdb_files) == 0) {
  stop("No PDB files found in the specified directory.")
}

# Print file names
print(basename(pdb_files))
```

```{r}
library(bio3d)

# Read all data from Models 
#  and superpose/fit coords
pdbs <- pdbaln(pdb_files, fit=TRUE, exefile="msa")
```

```{r}
pdbs
```
```{r}
rd <- rmsd(pdbs, fit=T)
range(rd)
```
```{r}
library(pheatmap)

colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)
```

```{r}
# Read a reference PDB structure
pdb <- read.pdb("1hsg")

plotb3(pdbs$b[1,], typ="l", lwd=2, sse=pdb)
points(pdbs$b[2,], typ="l", col="red")
points(pdbs$b[3,], typ="l", col="blue")
points(pdbs$b[4,], typ="l", col="darkgreen")
points(pdbs$b[5,], typ="l", col="orange")
abline(v=100, col="gray")
```

```{r}
core <- core.find(pdbs)
core.inds <- print(core, vol=0.5)
```

```{r}
xyz <- pdbfit(pdbs, core.inds, outpath="corefit_structures")
```

```{r}
rf <- rmsf(xyz)

plotb3(rf, sse=pdb)
abline(v=100, col="gray", ylab="RMSF")
```

## Predicted Alignment Error for domains 

```{r}
library(jsonlite)

# Listing of all PAE JSON files
pae_files <- list.files(path=results_dir,
                        pattern=".*model.*\\.json",
                        full.names = TRUE)
```

```{r}
pae1 <- read_json(pae_files[1],simplifyVector = TRUE)
pae5 <- read_json(pae_files[5],simplifyVector = TRUE)

attributes(pae1)
```

```{r}
# Per-residue pLDDT scores 
#  same as B-factor of PDB..
head(pae1$plddt) 
```

```{r}
pae1$max_pae
```

```{r}
pae5$max_pae
```

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)")
```

```{r}
plot.dmat(pae5$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```
