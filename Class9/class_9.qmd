---
title: "Class 9"
author: "Mudit"
format: pdf
---

## 1. Importing candy data

First things first, let’s get the data from the FiveThirtyEight GitHub repo. You can either read from the URL directely or download this candy-data.csv file and place it in your project directory. Either way we need to load it up with read.csv() and inspect the data to see exactly what we’re dealing with.

```{r}
candy_file <- "candy-data.csv"

candy = read.csv(candy_file, row.names=1)
head(candy)
```

> Q1. How many different candy types are in this dataset?

85

```{r}
nrow(candy)
```

> Q2. How many fruity candy types are in the dataset?
The functions dim(), nrow(), table() and sum() may be useful for answering the first 2 questions.

```{r}
sum(candy$fruity)
```

## 2. What is your favorate candy?
One of the most interesting variables in the dataset is winpercent. For a given candy this value is the percentage of people who prefer this candy over another randomly chosen candy from the dataset (what 538 term a matchup). Higher values indicate a more popular candy.

We can find the winpercent value for Twix by using its name to access the corresponding row of the dataset. This is because the dataset has each candy name as rownames (recall that we set this when we imported the original CSV file). For example the code for Twix is:

```{r}
candy["Twix", ]$winpercent
```

> Q3. What is your favorite candy in the dataset and what is it’s winpercent value?

Air Heads
```{r}
candy["Air Heads", ]$winpercent
```


> Q4. What is the winpercent value for “Kit Kat”?

```{r}
candy["Kit Kat", ]$winpercent
```

> Q5. What is the winpercent value for “Tootsie Roll Snack Bars”?

```{r}
candy["Tootsie Roll Snack Bars", ]$winpercent
```

```{r}
library(dplyr)

candy |>
filter(rownames(candy) %in% c("Kit Kat", "Tootsie Roll Snack Bars")) |>
  select(winpercent)
```

```{r}
candy |>
  filter(winpercent > 75) |>
  filter(pricepercent < 0.5)
```


```{r}
library(dplyr)

candy |>
filter(rownames(candy) == "Dum Dums") |>
  select(winpercent)
```
```{r}
library(dplyr)

candy |>
filter(rownames(candy) %in% c("Dum Dums", "Twix")) |>
  select(winpercent)
```

```{r}
library("skimr")
skim(candy)
```

>Q6. Is there any variable/column that looks to be on a different scale to the majority of the other columns in the dataset?

Yes, majority of the columns like chocolate have binary scale 1s or 0s while winpercent, pricepercent and sugarpercent column has a continous numerical scale


>Q7. What do you think a zero and one represent for the candy$chocolate column?

zero means the candy has chocolate while one represent it does not

> Q8. Plot a histogram of winpercent values

```{r}
#hist(candy$winpercent)
hist(candy$winpercent, 
     main = "Distribution of Win Percentages", 
     xlab = "Win Percent", 
     col = "lightblue", 
     border = "black")
```

```{r}
library(ggplot2)

ggplot(candy) + 
  aes(winpercent) + 
  geom_histogram(bins=10) +
  theme_bw()
  
```

```{r}
mean_winpercent <- mean(candy$winpercent)
median_winpercent <- median(candy$winpercent)

mean_winpercent
median_winpercent
```

> Q9. Is the distribution of winpercent values symmetrical?

No, as mean and median are not equal

> Q10. Is the center of the distribution above or below 50%?

below 50%, as for skewed distribution median is a better choice for center of distribution

> Q11. On average is chocolate candy higher or lower ranked than fruit candy?

higher

```{r}
meanChoco <- mean(candy$winpercent[as.logical(candy$chocolate)])
meanFruit <- mean(candy$winpercent[as.logical(candy$fruity)])

meanChoco > meanFruit
```


> Q12. Is this difference statistically significant?

```{r}
t.test <- t.test(candy$winpercent[as.logical(candy$chocolate)], candy$winpercent[as.logical(candy$fruity)])

t.test
```
the p-value is less then 0.05 which indicates that this difference is significant.


## 3. Overall Candy Rankings

Let’s use the base R order() function together with head() to sort the whole dataset by winpercent. Or if you have been getting into the tidyverse and the dplyr package you can use the arrange() function together with head() to do the same thing and answer the following questions:

> Q13. What are the five least liked candy types in this set?

```{r}
library(dplyr)
candy %>% 
  arrange(winpercent) %>% 
  head(5)
```

> Q14. What are the top 5 all time favorite candy types out of this set?

```{r}
library(dplyr)
candy %>% 
  arrange(desc(winpercent)) %>% 
  head(5)
```
To examine more of the dataset in this vain we can make a barplot to visualize the overall rankings. We will use an iterative approach to building a useful visulization by getting a rough starting plot and then refining and adding useful details in a stepwise process.

> Q15. Make a first barplot of candy ranking based on winpercent values.

```{r}
library(ggplot2)

ggplot(candy) + 
  aes(winpercent, rownames(candy)) +
  geom_bar(stat = "identity")
```
> Q16. This is quite ugly, use the reorder() function to get the bars sorted by winpercent?

```{r}
library(ggplot2)

ggplot(candy) + 
  aes(winpercent, reorder(rownames(candy),winpercent)) +
  geom_bar(stat = "identity")

```

Time to add some useful color

Let’s setup a color vector (that signifies candy type) that we can then use for some future plots. We start by making a vector of all black values (one for each candy). Then we overwrite chocolate (for chocolate candy), brown (for candy bars) and red (for fruity candy) values.

```{r}
my_cols=rep("black", nrow(candy))
my_cols[as.logical(candy$chocolate)] = "chocolate"
my_cols[as.logical(candy$bar)] = "brown"
my_cols[as.logical(candy$fruity)] = "pink"
```

Now let’s try our barplot with these colors. Note that we use fill=my_cols for geom_col(). Experement to see what happens if you use col=mycols.

```{r}
ggplot(candy) + 
  aes(winpercent, reorder(rownames(candy),winpercent)) +
  geom_col(fill=my_cols) 
```

Now, for the first time, using this plot we can answer questions like:
> Q17. What is the worst ranked chocolate candy?

Nik L Nip

> Q18. What is the best ranked fruity candy?

Reese's Peanut Butter cup

## 4. Taking a look at pricepercent
What about value for money? What is the the best candy for the least money? One way to get at this would be to make a plot of winpercent vs the pricepercent variable. The pricepercent variable records the percentile rank of the candy’s price against all the other candies in the dataset. Lower vales are less expensive and high values more expensive.

To this plot we will add text labels so we can more easily identify a given candy. There is a regular geom_label() that comes with ggplot2. However, as there are quite a few candys in our dataset lots of these labels will be overlapping and hard to read. To help with this we can use the geom_text_repel() function from the ggrepel package.

```{r}
library(ggrepel)

# How about a plot of price vs win
ggplot(candy) +
  aes(winpercent, pricepercent, label=rownames(candy)) +
  geom_point(col=my_cols) + 
  geom_text_repel(col=my_cols, size=3.3, max.overlaps = 5)
```

> Q19. Which candy type is the highest ranked in terms of winpercent for the least money - i.e. offers the most bang for your buck?

Reeses Miniatures (just by looking at the plot)

```{r}
a <- data.frame(candyName = rownames(candy), bang_for_buck = candy$winpercent/candy$pricepercent)
library(dplyr)
a %>% 
  arrange(desc(bang_for_buck)) %>% 
  head(5)
```
Tootsie Roll Midgies (from the analysis)

> Q20. What are the top 5 most expensive candy types in the dataset and of these which is the least popular?

```{r}
ord <- order(candy$pricepercent, decreasing = TRUE)
head( candy[ord,c(11,12)], n=5 )
```
Nik L Nip

## 5 Exploring the correlation structure
Now that we’ve explored the dataset a little, we’ll see how the variables interact with one another. We’ll use correlation and view the results with the corrplot package to plot a correlation matrix.

```{r}
library(corrplot)
cij <- cor(candy)
corrplot(cij)
```

> Q22. Examining this plot what two variables are anti-correlated (i.e. have minus values)?

chocolate and fruity

> Q23. Similarly, what two variables are most positively correlated?

chocolate and winpercent

## 6. Principal Component Analysis
Let’s apply PCA using the prcom() function to our candy dataset remembering to set the scale=TRUE argument.

```{r}
pca <- prcomp(candy, scale = TRUE)
summary(pca)
```

```{r}
plot(pca$x[,1:2])
```

```{r}
plot(pca$x[,1:2], col=my_cols, pch=16)
```

```{r}
# Make a new data-frame with our PCA results and candy data
my_data <- cbind(candy, pca$x[,1:3])
```

```{r}
p <- ggplot(my_data) + 
        aes(x=PC1, y=PC2, 
            size=winpercent/100,  
            text=rownames(my_data),
            label=rownames(my_data)) +
        geom_point(col=my_cols)

p
```

```{r}
library(ggrepel)

p + geom_text_repel(size=3.3, col=my_cols, max.overlaps = 7)  + 
  theme(legend.position = "none") +
  labs(title="Halloween Candy PCA Space",
       subtitle="Colored by type: chocolate bar (dark brown), chocolate other (light brown), fruity (red), other (black)",
       caption="Data from 538")
```

```{r}
#library(plotly)
#ggplotly(p)

```

```{r}
par(mar=c(8,4,2,2))
barplot(pca$rotation[,1], las=2, ylab="PC1 Contribution")
```
> Q24. What original variables are picked up strongly by PC1 in the positive direction? Do these make sense to you?

pluribus, fruitly and hard. The ones positively correlated are on the same direction, while the ones that are negatively correlated are on opposite direction